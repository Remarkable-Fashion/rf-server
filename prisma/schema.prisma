generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Logs {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  message String @db.VarChar(100)

  Users   Users? @relation(fields: [usersId], references: [id])
  usersId Int?   @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@map("logs")
}

model Users {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  email         String  @unique
  name          String?
  phoneNumber   String? @map("phone_number") @db.VarChar(20)
  phoneVerified Boolean @default(false) @map("phone_verified")

  favorites Favorites[]
  scraps    Scraps[]
  posts     Posts[]
  meta      UserMetas?
  profile   Profile?
  socials   Socials[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  blocked   Block[] @relation("blockedBy")
  blockedBy Block[] @relation("blocked")

  logs Logs[]

  createdAt DateTime  @default(now()) @map("created_at")
  // recommendClothes Clothes[] @map("recommend_clothes")
  Clothes   Clothes[]

  @@map("users")
}

model Follows {
  follower    Users @relation("follower", fields: [followerId], references: [id])
  followerId  Int   @map("follower_id") @db.UnsignedInt
  following   Users @relation("following", fields: [followingId], references: [id])
  followingId Int   @map("following_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@id([followerId, followingId])
  @@map("follows")
}

model Block {
  blocker   Users @relation("blockedBy", fields: [blockerId], references: [id])
  blockerId Int   @map("blocker_id") @db.UnsignedInt
  blocked   Users @relation("blocked", fields: [blockedId], references: [id])
  blockedId Int   @map("block_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@id([blockerId, blockedId])
  @@map("blocks")
}

model Profile {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  sex          Sex?
  height       Int?
  weight       Int?
  introduction String?
  avartar      String?

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @unique @map("user_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@map("profiles")
}

model UserMetas {
  id   Int  @id @default(autoincrement()) @db.UnsignedInt
  role Role @default(User)

  user    Users @relation(fields: [usersId], references: [id])
  usersId Int   @unique @map("user_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_metas")
}

model Socials {
  id       Int        @id @default(autoincrement()) @db.UnsignedInt
  type     SocialType
  socialId String     @map("social_id")

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @unique @map("user_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([type, socialId])
  @@map("socials")
}

model Posts {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  title       String  @db.VarChar(50)
  description String  @db.VarChar(200)
  place       String? @db.VarChar(50)

  tpos    PostTpos[]
  seasons PostSeasons[]
  styles  PostStyles[]

  sex      String? @db.VarChar(10)
  isPublic Boolean @default(true) @map("is_public")

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @map("user_id") @db.UnsignedInt

  favorites Favorites[]
  scraps    Scraps[]

  images  Images[]
  clothes Clothes[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("posts")
}

model Images {
  id     Int    @id @default(autoincrement()) @db.UnsignedInt
  url    String @db.VarChar(500)
  post   Posts  @relation(fields: [postId], references: [id])
  postId Int    @map("post_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@map("images")
}

model Clothes {
  id       Int             @id @default(autoincrement()) @db.UnsignedInt
  category ClothesCategory
  name     String          @db.VarChar(50)
  price    Int?            @db.UnsignedInt
  color    String?         @db.VarChar(50)
  size     String?         @db.VarChar(10)
  brand    String?         @db.VarChar(20)
  reason   String?         @db.VarChar(50)
  imageUrl String?         @map("image_url") @db.VarChar(500)
  siteUrl  String?         @map("site_url") @db.VarChar(500)

  post   Posts? @relation(fields: [postId], references: [id])
  postId Int?   @map("post_id") @db.UnsignedInt

  user   Users? @relation(fields: [userId], references: [id])
  userId Int?   @map("user_id") @db.UnsignedInt

  createdAt            DateTime    @default(now()) @map("created_at")
  favorites            Favorites[]
  scraps               Scraps[]
  recommendedClothesId Int?        @map("recommended_clothes_id") @db.UnsignedInt
  recommendedClothes   Clothes?    @relation("RecommendClothes", fields: [recommendedClothesId], references: [id])
  recommendClothes     Clothes[]   @relation("RecommendClothes")

  @@map("clothes")
}

model Favorites {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @map("user_id") @db.UnsignedInt

  post   Posts? @relation(fields: [postId], references: [id])
  postId Int?   @map("post_id") @db.UnsignedInt

  clothes   Clothes? @relation(fields: [clothesId], references: [id])
  clothesId Int?     @map("clothes_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, postId])
  @@unique([userId, clothesId])
  @@map("favorites")
}

model Scraps {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @map("user_id") @db.UnsignedInt

  post   Posts? @relation(fields: [postId], references: [id])
  postId Int?   @map("post_id") @db.UnsignedInt

  clothes   Clothes? @relation(fields: [clothesId], references: [id])
  clothesId Int?     @map("clothes_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, postId])
  @@unique([userId, clothesId])
  @@map("scraps")
}

model Tpos {
  id        Int        @id @default(autoincrement()) @db.UnsignedInt
  text      Tpo        @unique @default(Etc)
  emoji     String?
  createdAt DateTime   @default(now()) @map("created_at")
  deletedAt DateTime?  @map("deleted_at")
  PostTpos  PostTpos[]

  @@map("tpos")
}

model PostTpos {
  Posts   Posts @relation(fields: [postsId], references: [id])
  postsId Int   @map("post_id") @db.UnsignedInt

  tpo   Tpos @relation(fields: [tpoId], references: [id])
  tpoId Int  @map("tpo_id") @db.UnsignedInt

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([postsId, tpoId])
  @@map("post_tpos")
}

model Seasons {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  text        Season        @unique @default(Etc)
  emoji       String?
  createdAt   DateTime      @default(now()) @map("created_at")
  deletedAt   DateTime?     @map("deleted_at")
  PostSeasons PostSeasons[]

  @@map("seasons")
}

model PostSeasons {
  Posts   Posts @relation(fields: [postsId], references: [id])
  postsId Int   @map("post_id") @db.UnsignedInt

  season   Seasons @relation(fields: [seasonId], references: [id])
  seasonId Int     @map("season_id") @db.UnsignedInt

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([postsId, seasonId])
  @@map("post_seasons")
}

model Styles {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  text       Style        @unique @default(Etc)
  emoji      String?
  createdAt  DateTime     @default(now()) @map("created_at")
  deletedAt  DateTime?    @map("deleted_at")
  PostStyles PostStyles[]

  @@map("styles")
}

model PostStyles {
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  Posts     Posts     @relation(fields: [postsId], references: [id])
  postsId   Int       @db.UnsignedInt

  styles   Styles @relation(fields: [stylesId], references: [id])
  stylesId Int    @map("styles_id") @db.UnsignedInt

  @@id([postsId, stylesId])
  @@map("post_styles")
}

model tmpImages {
  id  Int    @id @default(autoincrement()) @db.UnsignedInt
  url String @db.VarChar(500)

  @@map("tmp_images")
}

enum ClothesCategory {
  Outer
  Top
  Bottom
  Acc
  Shoe
}

enum Role {
  SuperAdmin
  Admin
  User
  Etc
}

enum SocialType {
  Google
  Kakao
  Etc
}

enum Tpo {
  Occean
  Travel
  Date
  Wedding
  Campus
  Work
  Daily
  Etc
}

enum Season {
  Spring
  Summer
  Fall
  Winter
  Etc
}

enum Style {
  Classic
  Dandy
  Street
  Retro
  Etc
}

enum Sex {
  Male
  Female
}
