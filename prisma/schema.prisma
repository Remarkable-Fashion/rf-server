generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id    Int     @id @default(autoincrement()) @db.UnsignedInt
  email String  @unique
  name  String?

  favorites Favorites[]
  scraps    Scraps[]
  posts     Posts[]
  meta      UserMetas?

  @@map("users")
}

model UserMetas {
  id   Int  @id @default(autoincrement()) @db.UnsignedInt
  role Role @default(User)

  user    Users @relation(fields: [usersId], references: [id])
  usersId Int   @unique @map("user_id") @db.UnsignedInt

  @@map("user_metas")
}

model Posts {
  id          Int    @id @default(autoincrement()) @db.UnsignedInt
  title       String @db.VarChar(50)
  description String @db.VarChar(200)

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @map("user_id") @db.UnsignedInt

  favorites Favorites[]
  scraps    Scraps[]

  images  Images[]
  clothes Clothes[]

  @@map("posts")
}

model Images {
  id     Int    @id @default(autoincrement()) @db.UnsignedInt
  url    String @db.VarChar(200)
  post   Posts  @relation(fields: [postId], references: [id])
  postId Int    @map("post_id") @db.UnsignedInt

  @@map("images")
}

model Clothes {
  id       Int             @id @default(autoincrement()) @db.UnsignedInt
  category ClothesCategory
  name     String          @db.VarChar(50)
  price    Int?            @db.UnsignedInt
  color    String?         @db.VarChar(50)
  size     String?         @db.VarChar(10)

  imageUrl String? @map("image_url") @db.VarChar(200)
  siteUrl  String? @map("site_url") @db.VarChar(200)

  post   Posts @relation(fields: [postId], references: [id])
  postId Int   @map("post_id") @db.UnsignedInt

  @@map("clothes")
}

model Favorites {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @map("user_id") @db.UnsignedInt

  post   Posts @relation(fields: [postId], references: [id])
  postId Int   @map("post_id") @db.UnsignedInt

  @@unique([userId, postId])
  @@map("favorites")
}

model Scraps {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @map("user_id") @db.UnsignedInt

  post   Posts @relation(fields: [postId], references: [id])
  postId Int   @map("post_id") @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")
  // updatedAt        DateTime?         @map("updated_at")
  // deletedAt        DateTime?         @map("deleted_at")

  @@unique([userId, postId])
  @@map("scraps")
}

enum ClothesCategory {
  Outer
  Top
  Bottom
  Acc
  Shoe
}

enum Role {
  SuperAdmin
  Admin
  User
  Etc
}
